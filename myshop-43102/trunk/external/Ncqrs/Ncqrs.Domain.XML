<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ncqrs.Domain</name>
    </assembly>
    <members>
        <member name="T:Ncqrs.Domain.AggregateRoot">
            <summary>
            The abstract concept of an aggregate root.
            </summary>
        </member>
        <member name="M:Ncqrs.Domain.AggregateRoot.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ncqrs.Domain.AggregateRoot"/> class.
            </summary>
            <remarks>
            This instance will be initialized with the <see cref="T:Ncqrs.Eventing.BasicGuidGenerator"/>.
            </remarks>
        </member>
        <member name="M:Ncqrs.Domain.AggregateRoot.#ctor(Ncqrs.Eventing.IUniqueIdentifierGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Ncqrs.Domain.AggregateRoot"/> class.
            </summary>
            <param name="idGenerator">The id generator that will be used to generate a new id for this instance.</param>
        </member>
        <member name="T:Ncqrs.Domain.Storage.IAggregateRootLoader">
            <summary>
            Can load an aggregate root from a stream of historical events.
            </summary>
        </member>
        <member name="M:Ncqrs.Domain.Storage.IAggregateRootLoader.LoadAggregateRootFromEvents(System.Type,System.Collections.Generic.IEnumerable{Ncqrs.Eventing.HistoricalEvent})">
            <summary>
            Loads the aggregate root from historical events.
            </summary>
            <param name="aggregateRootType">Type of the aggregate root to load.</param>
            <param name="events">The historical events.</param>
            <returns>A new instance of the specified aggregate root type loaded with context that has been build from the events.</returns>
        </member>
        <member name="T:Ncqrs.Domain.UnitOfWork">
            <summary>
            A context from within domain object can be changed.
            <example>
            using (var work = new UnitOfWork(repository))
            {
                // Create the new customer.
                Customer newCustomer = new Customer();
                newCustomer.Name = "Pieter Joost van de Sande";
                
                // Accept the work that has been done in the context.
                work.Accept();
            }
            </example>
            </summary>
        </member>
        <member name="F:Ncqrs.Domain.UnitOfWork._threadInstance">
            <summary>
            The <see cref="T:Ncqrs.Domain.UnitOfWork"/> that is associated with the current thread.
            </summary>
        </member>
        <member name="F:Ncqrs.Domain.UnitOfWork._dirtyInstances">
            <summary>
            A queue that holds a reference to all instances that have themself registered as a dirty instance during the lifespan of this unit of work instance.
            </summary>
        </member>
        <member name="F:Ncqrs.Domain.UnitOfWork._repository">
            <summary>
            A reference to the repository that is asociated with this instance.
            </summary>
        </member>
        <member name="M:Ncqrs.Domain.UnitOfWork.#ctor(Ncqrs.Domain.Storage.IDomainRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Ncqrs.Domain.UnitOfWork"/> class.
            </summary>
            <param name="domainRepository">The domain repository to use in this unit of work.</param>
        </member>
        <member name="M:Ncqrs.Domain.UnitOfWork.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Ncqrs.Domain.UnitOfWork"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Ncqrs.Domain.UnitOfWork.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Ncqrs.Domain.UnitOfWork.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Ncqrs.Domain.UnitOfWork.RegisterDirtyInstance(Ncqrs.Domain.AggregateRoot)">
            <summary>
            Registers the dirty.
            </summary>
            <param name="dirtyInstance">The dirty instance.</param>
        </member>
        <member name="M:Ncqrs.Domain.UnitOfWork.Accept">
            <summary>
            Accepts the unit of work and persist the changes.
            </summary>
        </member>
        <member name="M:Ncqrs.Domain.UnitOfWork.Required">
            <summary>
            Make sure that a valid <see cref="T:Ncqrs.Domain.UnitOfWork"/> is available.
            </summary>
        </member>
        <member name="P:Ncqrs.Domain.UnitOfWork.Current">
            <summary>
            Gets the <see cref="T:Ncqrs.Domain.UnitOfWork"/> associated with the current thread context.
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:Ncqrs.Domain.UnitOfWork.IsDisposed">
            <summary>
            Gets or sets a value indicating whether this instance is disposed.
            </summary>
            <value>
            <c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ncqrs.Domain.UnitOfWork.DomainRepository">
            <summary>
            Gets the domain repository.
            </summary>
            <value>The domain repository.</value>
        </member>
        <member name="T:Ncqrs.Domain.Storage.IDomainRepository">
            <summary>
            A repository that can be used to get and save aggregate roots.
            </summary>
        </member>
        <member name="M:Ncqrs.Domain.Storage.IDomainRepository.GetById(System.Type,System.Guid)">
            <summary>
            Gets aggregate root by id.
            </summary>
            <param name="aggregateRootType">Type of the aggregate root.</param>
            <param name="id">The id of the aggregate root.</param>
            <returns>A new instance of the aggregate root that contains the latest known state.</returns>
        </member>
        <member name="M:Ncqrs.Domain.Storage.IDomainRepository.GetById``1(System.Guid)">
            <summary>
            Gets aggregate root by id.
            </summary>
            <typeparam name="T">The type of the aggregate root.</typeparam>
            <param name="id">The id of the aggregate root.</param>
            <returns>A new instance of the aggregate root that contains the latest known state.</returns>
        </member>
        <member name="M:Ncqrs.Domain.Storage.IDomainRepository.Save(Ncqrs.Domain.AggregateRoot)">
            <summary>
            Saves the specified aggregate root.
            </summary>
            <param name="aggregateRootToSave">The aggregate root to save.</param>
        </member>
        <member name="T:Ncqrs.Domain.Storage.DefaultAggregateRootLoader">
            <summary>
            The default aggregate root loader than can load an aggregate root instance from a historic event stream.
            </summary>
        </member>
    </members>
</doc>
