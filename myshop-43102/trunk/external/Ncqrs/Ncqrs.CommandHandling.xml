<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ncqrs.CommandHandling</name>
    </assembly>
    <members>
        <member name="T:Ncqrs.CommandHandling.ICommandService">
            <summary>
            A service that dispatches Command objects to their appropriate CommandHandler. CommandHandlers can subscribe and
            unsubscribe to specific types of commands. Only a single handler may be subscribed for a single type of command at any time.
            </summary>
        </member>
        <member name="M:Ncqrs.CommandHandling.ICommandService.Execute(Ncqrs.Commands.ICommand)">
            <summary>
            Execute a <see cref="T:Ncqrs.Commands.ICommand"/> by giving it to the registered <see cref="T:Ncqrs.CommandHandling.ICommandHandler"/>.
            </summary>
            <param name="command">The command to execute.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when the <i>command</i> was a <c>null</c> dereference.</exception>
            <exception cref="T:Ncqrs.CommandHandling.CommandHandlerNotFoundException">Occurs when the <see cref="T:Ncqrs.CommandHandling.ICommandHandler"/> was not found for on the given <see cref="T:Ncqrs.Commands.ICommand"/>.</exception>
        </member>
        <member name="M:Ncqrs.CommandHandling.ICommandService.Execute(System.Collections.Generic.IEnumerable{Ncqrs.Commands.ICommand})">
            <summary>
            Executes multiple <see cref="T:Ncqrs.Commands.ICommand"/>'s by giving them to the registered <see cref="T:Ncqrs.CommandHandling.ICommandHandler"/>.
            </summary>
            <param name="commands">The commands to execute.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when the <i>command</i> was a <c>null</c> dereference.</exception>
            <exception cref="T:Ncqrs.CommandHandling.CommandHandlerNotFoundException">Occurs when a <see cref="T:Ncqrs.CommandHandling.ICommandHandler"/> was not found for on of the given <see cref="T:Ncqrs.Commands.ICommand"/>'s.</exception>
        </member>
        <member name="M:Ncqrs.CommandHandling.ICommandService.RegisterHandler(System.Type,Ncqrs.CommandHandling.ICommandHandler)">
            <summary>
            Registers the handler for the specified command type. The handler will be called for every command of the specified type.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="handler">The handler that will be called for every command of the specified type.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when the <i>commandType</i> or <i>handler</i> was a <c>null</c> dereference.</exception>
        </member>
        <member name="M:Ncqrs.CommandHandling.ICommandService.RegisterHandler``1(Ncqrs.CommandHandling.ICommandHandler)">
            <summary>
            Registers the handler for the specified command type. The handler will be called for every command of the specified type.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <param name="handler">The handler that will be called for every command of the specified type.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when the <i>commandType</i> or <i>handler</i> was a <c>null</c> dereference.</exception>
        </member>
        <member name="M:Ncqrs.CommandHandling.ICommandService.UnregisterHandler(System.Type,Ncqrs.CommandHandling.ICommandHandler)">
            <summary>
            Unregisters the handler of the specified command type. The handler will not be called any more.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="handler">The handler to unregister.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when the <i>commandType</i> or <i>handler</i> was a <c>null</c> dereference.</exception>
        </member>
        <member name="T:Ncqrs.CommandHandling.AutoMapping.Actions.IAutoMappedCommandAction">
            <summary>
            A action that executes the needs of a mapped command.
            </summary>
        </member>
        <member name="M:Ncqrs.CommandHandling.AutoMapping.Actions.IAutoMappedCommandAction.Execute">
            <summary>
            Executes this action.
            </summary>
        </member>
        <member name="T:Ncqrs.CommandHandling.TransactionalInProcessCommandService">
            <summary>
            A service that dispatches Command objects to their appropriate CommandHandler. CommandHandlers can subscribe and
            unsubscribe to specific types of commands. Only a single handler may be subscribed for a single type of command at any time.
            </summary>
            <remarks>
            This command service is in process and transactional. The transactional system is based on <see cref="N:System.Transactions"/>. 
            Since this service is in process, no additional software of configiration is needed.
            </remarks>
        </member>
        <member name="M:Ncqrs.CommandHandling.TransactionalInProcessCommandService.Execute(Ncqrs.Commands.ICommand)">
            <summary>
            Execute a <see cref="T:Ncqrs.Commands.ICommand"/> by giving it to the registered <see cref="T:Ncqrs.CommandHandling.ICommandHandler"/>.
            </summary>
            <param name="command">The command to execute.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when the <i>command</i> was a <c>null</c> dereference.</exception>
            <exception cref="T:Ncqrs.CommandHandling.CommandHandlerNotFoundException">Occurs when the <see cref="T:Ncqrs.CommandHandling.ICommandHandler"/> was not found for on the given <see cref="T:Ncqrs.Commands.ICommand"/>.</exception>
        </member>
        <member name="M:Ncqrs.CommandHandling.TransactionalInProcessCommandService.Execute(System.Collections.Generic.IEnumerable{Ncqrs.Commands.ICommand})">
            <summary>
            Executes multiple <see cref="T:Ncqrs.Commands.ICommand"/>'s by giving them to the registered <see cref="T:Ncqrs.CommandHandling.ICommandHandler"/>.
            </summary>
            <param name="commands">The commands to execute.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when the <i>command</i> was a <c>null</c> dereference.</exception>
            <exception cref="T:Ncqrs.CommandHandling.CommandHandlerNotFoundException">Occurs when a <see cref="T:Ncqrs.CommandHandling.ICommandHandler"/> was not found for on of the given <see cref="T:Ncqrs.Commands.ICommand"/>'s.</exception>
        </member>
        <member name="M:Ncqrs.CommandHandling.TransactionalInProcessCommandService.RegisterHandler``1(Ncqrs.CommandHandling.ICommandHandler)">
            <summary>
            Registers the handler for the specified command type. The handler will be called for every command of the specified type.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <param name="handler">The handler that will be called for every command of the specified type.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when the <i>commandType</i> or <i>handler</i> was a <c>null</c> dereference.</exception>
        </member>
        <member name="M:Ncqrs.CommandHandling.TransactionalInProcessCommandService.RegisterHandler(System.Type,Ncqrs.CommandHandling.ICommandHandler)">
            <summary>
            Registers the handler for the specified command type. The handler will be called for every command of the specified type.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="handler">The handler that will be called for every command of the specified type.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when the <i>commandType</i> or <i>handler</i> was a <c>null</c> dereference.</exception>
        </member>
        <member name="M:Ncqrs.CommandHandling.TransactionalInProcessCommandService.UnregisterHandler(System.Type,Ncqrs.CommandHandling.ICommandHandler)">
            <summary>
            Unregisters the handler of the specified command type. The handler will not be called any more.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="handler">The handler to unregister.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when the <i>commandType</i> or <i>handler</i> was a <c>null</c> dereference.</exception>
            <exception cref="T:System.InvalidOperationException">Occurs when the <i>handler</i> is not the same as the registered handler for the specified command type.</exception>
        </member>
        <member name="M:Ncqrs.CommandHandling.AutoMapping.Actions.DirectMethodCommandInfo.#ctor(Ncqrs.Commands.ICommand,System.Type,System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ncqrs.CommandHandling.AutoMapping.Actions.DirectMethodCommandInfo"/> struct.
            </summary>
            <param name="command">The command.</param>
            <param name="aggregateType">Type of the aggregate.</param>
            <param name="aggregateRootIdValue">The aggregate root id.</param>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="P:Ncqrs.CommandHandling.AutoMapping.Actions.DirectMethodCommandInfo.AggregateType">
            <summary>
            Gets the type of the aggregate root.
            </summary>
            <value>The type of the aggregate root.</value>
        </member>
        <member name="P:Ncqrs.CommandHandling.AutoMapping.Actions.DirectMethodCommandInfo.AggregateRootIdValue">
            <summary>
            Gets the aggregate root id.
            </summary>
            <value>The id of the aggregate root.</value>
        </member>
        <member name="T:Ncqrs.CommandHandling.CommandHandler`1">
            <summary>
            Represents a command handler.
            </summary>
            <typeparam name="T">The type of the command to handle.</typeparam>
        </member>
        <member name="T:Ncqrs.CommandHandling.ICommandHandler">
            <summary>
            Handles a command. This means that the handles 
            executes the correct action based on the command.
            </summary>
        </member>
        <member name="M:Ncqrs.CommandHandling.ICommandHandler.Execute(Ncqrs.Commands.ICommand)">
            <summary>
            Executes the command.
            </summary>
            <param name="command">The command to execute. This should not be null.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when <i>command</i> is null.</exception>
        </member>
        <member name="M:Ncqrs.CommandHandling.CommandHandler`1.#ctor(Ncqrs.Domain.Storage.IDomainRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Ncqrs.CommandHandling.CommandHandler`1"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">Occurs when <i>domainRepository</i> is <c>null</c>.</exception>
        </member>
        <member name="M:Ncqrs.CommandHandling.CommandHandler`1.Execute(`0)">
            <summary>
            Executes the command.
            </summary>
            <param name="command">The command to execute. This should not be null.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when <i>command</i> is null.</exception>
        </member>
        <member name="P:Ncqrs.CommandHandling.CommandHandler`1.Repository">
            <summary>
            Gets the repository.
            </summary>
            <value>The repository.</value>
        </member>
        <member name="T:Ncqrs.CommandHandling.AutoMapping.Actions.DirectMethodAction">
            <summary>
            An auto mapped action that executes a method on an aggregate root based on the mapping specified on the command.
            </summary>
        </member>
        <member name="M:Ncqrs.CommandHandling.AutoMapping.Actions.DirectMethodAction.#ctor(Ncqrs.Domain.Storage.IDomainRepository,Ncqrs.Commands.ICommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Ncqrs.CommandHandling.AutoMapping.Actions.DirectMethodAction"/> class.
            </summary>
            <param name="repository">The repository.</param>
            <param name="command">The command.</param>
        </member>
        <member name="M:Ncqrs.CommandHandling.AutoMapping.Actions.DirectMethodAction.Execute">
            <summary>
            Executes this method on the aggregate root based on the mapping of the command given a construction time.
            </summary>
        </member>
        <member name="M:Ncqrs.CommandHandling.AutoMapping.Actions.ObjectCreationCommandInfo.#ctor(Ncqrs.Commands.ICommand,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ncqrs.CommandHandling.AutoMapping.Actions.ObjectCreationCommandInfo"/> struct.
            </summary>
            <param name="command">The command.</param>
            <param name="aggregateType">Type of the aggregate.</param>
        </member>
        <member name="P:Ncqrs.CommandHandling.AutoMapping.Actions.ObjectCreationCommandInfo.AggregateType">
            <summary>
            Gets the type of the aggregate root.
            </summary>
            <value>The type of the aggregate root.</value>
        </member>
        <member name="T:Ncqrs.CommandHandling.AutoMapping.CommandAutoMappingConfiguration">
            <summary>
            Helper methods to get properties and parameter values from commands.
            </summary>
        </member>
        <member name="M:Ncqrs.CommandHandling.AutoMapping.CommandAutoMappingConfiguration.GetParameterValues(Ncqrs.Commands.ICommand,System.Reflection.ParameterInfo[])">
            <summary>
            Gets all the values for the parameters filled with the values from the command.
            </summary>
            <param name="command">The command.</param>
            <param name="parameters">The parameters.</param>
            <returns>All the values for the parameters.</returns>
        </member>
        <member name="M:Ncqrs.CommandHandling.AutoMapping.CommandAutoMappingConfiguration.GetPropertyValueBasedOnParameterInfo(Ncqrs.Commands.ICommand,System.Reflection.ParameterInfo)">
            <summary>
            Gets the property value from the first matched property. The match is made by the name and the type of the specified parameter.
            </summary>
            <remarks>The property match is done by the name and type, where the name is matched case insensitive and the type of the 
            parameter type should be assignable from the property type.</remarks>
            <param name="command">The command.</param>
            <param name="parameterInfo">The parameter info.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <i>command</i> or <i>parameterInfo</i> is null.</exception>
            <returns>The value from the first matched property.</returns>
        </member>
        <member name="M:Ncqrs.CommandHandling.AutoMapping.CommandAutoMappingConfiguration.GetCommandProperties(Ncqrs.Commands.ICommand)">
            <summary>
            Gets all the propertie from the command that should be used in the auto mapping process.
            </summary>
            <remarks>All properties marked with the <see cref="T:Ncqrs.Commands.Attributes.ExcludeInMappingAttribute"/> are ignored.</remarks>
            <param name="command">The command.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <i>command</i> is null.</exception>
            <returns>A result set containing all properties that should be used in the auto mapping process.</returns>
        </member>
        <member name="T:Ncqrs.CommandHandling.AutoMapping.Actions.ObjectCreationAction">
            <summary>
            An auto mapped action for a command. It created the object as specified by the mapping.
            </summary>
        </member>
        <member name="M:Ncqrs.CommandHandling.AutoMapping.Actions.ObjectCreationAction.#ctor(Ncqrs.Domain.Storage.IDomainRepository,Ncqrs.Commands.ICommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Ncqrs.CommandHandling.AutoMapping.Actions.ObjectCreationAction"/> class.
            </summary>
            <param name="repository">The repository.</param>
            <param name="command">The command.</param>
        </member>
        <member name="M:Ncqrs.CommandHandling.AutoMapping.Actions.ObjectCreationAction.Execute">
            <summary>
            Executes this action.
            </summary>
        </member>
        <member name="T:Ncqrs.CommandHandling.AutoMapping.ActionFactory">
            <summary>
            A factory to use the create action for commands based on mapping.
            </summary>
        </member>
        <member name="M:Ncqrs.CommandHandling.AutoMapping.ActionFactory.#ctor(Ncqrs.Domain.Storage.IDomainRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Ncqrs.CommandHandling.AutoMapping.ActionFactory"/> class.
            </summary>
            <param name="repository">The repository.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when <i>repository</i> is <c>null</c>.</exception>
        </member>
        <member name="M:Ncqrs.CommandHandling.AutoMapping.ActionFactory.CreateActionForCommand(Ncqrs.Commands.ICommand)">
            <summary>
            Creates an action for command based on mapping.
            </summary>
            <param name="command">The command.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when <i>command</i> was <c>null</c>.</exception>
            <exception cref="T:Ncqrs.CommandHandling.AutoMapping.MappingForCommandNotFoundException">Occurs when there was an error in the mapping of the command.</exception>
            <returns>A <see cref="T:Ncqrs.CommandHandling.AutoMapping.Actions.IAutoMappedCommandAction"/> action created based on the mapping of the command.</returns>
        </member>
        <member name="T:Ncqrs.CommandHandling.AutoMapping.CommandMappingException">
            <summary>
            Occurs when the mapping of a command is invalid.
            </summary>
        </member>
        <member name="M:Ncqrs.CommandHandling.AutoMapping.CommandMappingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ncqrs.CommandHandling.AutoMapping.CommandMappingException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:Ncqrs.CommandHandling.AutoMapping.CommandMappingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ncqrs.CommandHandling.AutoMapping.CommandMappingException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param><param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="M:Ncqrs.CommandHandling.AutoMapping.CommandMappingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ncqrs.CommandHandling.AutoMapping.CommandMappingException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param><param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination. </param><exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception><exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Ncqrs.CommandHandling.AutoMapping.AutoMappingException">
            <summary>
            Occurs when an command could not be mapped.
            </summary>
        </member>
        <member name="M:Ncqrs.CommandHandling.AutoMapping.AutoMappingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ncqrs.CommandHandling.AutoMapping.AutoMappingException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the exception.</param>
        </member>
        <member name="M:Ncqrs.CommandHandling.AutoMapping.AutoMappingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ncqrs.CommandHandling.AutoMapping.AutoMappingException"/> class.
            </summary>
            <param name="message">The message that describes the exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Ncqrs.CommandHandling.AutoMapping.AutoMappingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ncqrs.CommandHandling.AutoMapping.AutoMappingException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param><param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination. </param><exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception><exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Ncqrs.CommandHandling.AutoMapping.AutoMappingCommandHandler`1">
            <summary>
            A command handler that execute an action based on the mapping of a command.
            </summary>
            <typeparam name="T">The type of the command.</typeparam>
        </member>
        <member name="M:Ncqrs.CommandHandling.AutoMapping.AutoMappingCommandHandler`1.#ctor(Ncqrs.Domain.Storage.IDomainRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Ncqrs.CommandHandling.AutoMapping.AutoMappingCommandHandler`1"/> class.
            </summary>
            <param name="domainRepository">The domain repository.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when <i>domainRepository</i> is <c>null</c>.</exception>
        </member>
        <member name="M:Ncqrs.CommandHandling.AutoMapping.AutoMappingCommandHandler`1.Execute(`0)">
            <summary>
            Executes the command.
            </summary>
            <param name="command">The command to execute. This should not be null.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when <i>command</i> is null.</exception>
        </member>
        <member name="T:Ncqrs.CommandHandling.AutoMapping.MappingForCommandNotFoundException">
            <summary>
            Occurs when there is no auto mapping found for a <see cref="T:Ncqrs.Commands.ICommand"/>.
            </summary>
        </member>
        <member name="M:Ncqrs.CommandHandling.AutoMapping.MappingForCommandNotFoundException.#ctor(System.String,Ncqrs.Commands.ICommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Ncqrs.CommandHandling.AutoMapping.MappingForCommandNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="command">The command.</param>
        </member>
        <member name="M:Ncqrs.CommandHandling.AutoMapping.MappingForCommandNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ncqrs.CommandHandling.AutoMapping.MappingForCommandNotFoundException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param><param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination. </param><exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception><exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="P:Ncqrs.CommandHandling.AutoMapping.MappingForCommandNotFoundException.Command">
            <summary>
            Gets the command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="T:Ncqrs.CommandHandling.CommandHandlerNotFoundException">
            <summary>
            Occurs when a handler was not found to execute the command.
            </summary>
        </member>
        <member name="M:Ncqrs.CommandHandling.CommandHandlerNotFoundException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ncqrs.CommandHandling.CommandHandlerNotFoundException"/> class.
            </summary>
            <param name="commandType">Type of the command.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when <i>commandType</i> is a <c>null</c> dereference.</exception>
        </member>
        <member name="M:Ncqrs.CommandHandling.CommandHandlerNotFoundException.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ncqrs.CommandHandling.CommandHandlerNotFoundException"/> class.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when <i>commandType</i> is a <c>null</c> dereference.</exception>
        </member>
        <member name="M:Ncqrs.CommandHandling.CommandHandlerNotFoundException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ncqrs.CommandHandling.CommandHandlerNotFoundException"/> class.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when <i>commandType</i> is a <c>null</c> dereference.</exception>
        </member>
        <member name="M:Ncqrs.CommandHandling.CommandHandlerNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ncqrs.CommandHandling.CommandHandlerNotFoundException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="P:Ncqrs.CommandHandling.CommandHandlerNotFoundException.CommandType">
            <summary>
            Gets the type of the command.
            </summary>
        </member>
    </members>
</doc>
